# -*- coding: utf-8 -*-
"""Rainfall Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YENOQfo38GgplAd-WQBoyHMXLW7m4Ue1

Importing library and dataset
"""

#library
import numpy as np
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report
from IPython.display import HTML
import warnings
warnings.filterwarnings('ignore')
#

"""Setting Values

"""

dataset = pd.read_csv('weatherAUS.csv')

x = dataset.iloc[:,[1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]].values #independent variable

y = dataset.iloc[:,-1].values # dependent variable
y = y.reshape(-1,1)  # 1D list to 2D list
y

"""Dealing with improper data"""

imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
x = imputer.fit_transform(x)
y = imputer.fit_transform(y)

"""Encoding Dataset"""

le1 = LabelEncoder()
x[:,0] = le1.fit_transform(x[:,0])

le2 = LabelEncoder()
x[:,4] = le2.fit_transform(x[:,4])

le3 = LabelEncoder()
x[:,6] = le3.fit_transform(x[:,6])

le4 = LabelEncoder()
x[:,7] = le4.fit_transform(x[:,7])

le5 = LabelEncoder()
x[:,-1] = le5.fit_transform(x[:,-1])

le6 = LabelEncoder()
y[:,-1] = le6.fit_transform(y[:,-1])
x
y = np.array(y,dtype=float)
y

"""Feature Scaling"""

sc = StandardScaler()

x = sc.fit_transform(x)

"""Splitting Training and Testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=0)
y_train = y_train.reshape(-1,1)
y_test = y_test.reshape(-1,1)

"""Training Model"""

classifier = RandomForestClassifier(n_estimators= 100,random_state=0)
classifier.fit(X_train,y_train)

classifier.score(X_train,y_train)
y_pred = le6.inverse_transform(np.array(classifier.predict(X_test),dtype=int))
y_test = le6.inverse_transform(np.array(y_test,dtype=int))
y_pred = y_pred.reshape(-1,1)
y_test = y_test.reshape(-1,1)
df = np.concatenate((y_test,y_pred),axis=1)
dataframe = pd.DataFrame(df,columns=['Will it Rain tomorrow?','Preditiction'])
dataframe

accuracy_score(y_test,y_pred)
print(confusion_matrix(y_test, y_pred))
print("\n")
print(classification_report(y_test, y_pred))

"""Output

"""

def View(df):
    css = """<style>
    table { border-collapse: collapse; border: 3px solid #eee; }
    table tr th:first-child { background-color: #eeeeee; color: #333; font-weight: bold }
    table thead th { background-color: #eee; color: #000; }
    tr, th, td { border: 1px solid #ccc; border-width: 1px 0 0 1px; border-collapse: collapse;
    padding: 3px; font-family: monospace; font-size: 10px }</style>
    """
    s  = '<script type="text/Javascript">'
    s += 'var win = window.open("", "Title", "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, width=780, height=200, top="+(screen.height-400)+", left="+(screen.width-840));'
    s += 'win.document.body.innerHTML = \'' + (df.to_html() + css).replace("\n",'\\') + '\';'
    s += '</script>'
    return(HTML(s+css))
View(dataframe)
print(dataframe)

# prompt: take 19 rows of weatherAus and just print the prediction

print(y_pred[:19])

# prompt: take 19 rows of weatherAus and just print the prediction and the factors  corrspondingly

# Assuming your code is already executed and dataframe and y_pred are defined

# Print the first 19 rows of the dataframe


# Alternatively, print only the prediction and corresponding factors (assuming you want the actual factors from the original dataset)
for i in range(19):
  print(f"Prediction: {y_pred[i][0]}, Factors: {dataset.iloc[i, [1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]].values}")

# prompt: take data from /content/test_set.xlsx and print the predicted rainfall

# Load the test dataset
test_dataset = pd.read_excel('/content/test_set.xlsx')

# Assuming the columns in test_dataset are the same as the ones used for training (x)
x_test_new = test_dataset.iloc[:,[1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]].values

# Dealing with missing values (using the same strategy as in your training code)
x_test_new = imputer.transform(x_test_new)

# Encoding categorical variables (using the same label encoders from training)
x_test_new[:,0] = le1.transform(x_test_new[:,0])
x_test_new[:,4] = le2.transform(x_test_new[:,4])
x_test_new[:,6] = le3.transform(x_test_new[:,6])
x_test_new[:,7] = le4.transform(x_test_new[:,7])
x_test_new[:,-1] = le5.transform(x_test_new[:,-1])

# Feature scaling (using the same scaler from training)
x_test_new = sc.transform(x_test_new)

# Make predictions
y_pred_new = le6.inverse_transform(np.array(classifier.predict(x_test_new),dtype=int))

# Print the predicted rainfall
print(y_pred_new)